buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.2")
        classpath("io.spring.gradle:docbook-reference-plugin:0.3.1")
        classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1")
    }
}

configure(allprojects) {
    group 'net.muxserver.krakenmush'
    version '1.0-SNAPSHOT'


    ext.scalaBaseVersion = '2.11'
    ext.scalaVersion = "${scalaBaseVersion}.7"
    ext.slf4jVersion = '1.7.12'
    ext.logbackVersion = '1.1.3'
    ext.akkaVersion = '2.4.0-RC1'

    apply plugin: 'java'
    apply plugin: 'scala'

    compileJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
            "-Xlint:unchecked", "-Xlint:-options", "-Werror"
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
            "-Xlint:-unchecked", "-Xlint:-options"]

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.compilerArgs += "-parameters"
    }

    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))
        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])
    }

    repositories {
        jcenter()
        maven {
            name = "typesafe-maven-release"
            url = "https://repo.typesafe.com/typesafe/maven-releases"
        }
        mavenCentral()
    }

    sourceSets.all { ext.purpose = null }

    sourceSets {
        main {
            purpose = "production"
        }
        test {
            purpose = "test"
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.scala-lang:scala-library:${scalaVersion}"
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        compile "com.typesafe.scala-logging:scala-logging_${scalaBaseVersion}:3.1.0"
        compile "com.typesafe:config:1.3.0"
        testCompile "junit:junit:4.11"
        testCompile "org.scalatest:scalatest_${scalaBaseVersion}:2.2.5"
        testCompile "org.mockito:mockito-all:1.9.5"
    }
}

configure(rootProject) {

    apply plugin: 'idea'

    dependencies {
        compile "com.typesafe.akka:akka-actor_${scalaBaseVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-remote_${scalaBaseVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster_${scalaBaseVersion}:${akkaVersion}"
        testCompile "com.typesafe.akka:akka-testkit_${scalaBaseVersion}:${akkaVersion}"

    }
}



