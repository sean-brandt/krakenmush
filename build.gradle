/*
 * Copyright 2015 Sean Brandt
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.2")
        classpath("io.spring.gradle:docbook-reference-plugin:0.3.1")
        classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1")
        classpath 'org.scoverage:gradle-scoverage:1.0.9'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.3.1"
}

configure(allprojects) {
    group 'net.muxserver.krakenmush'
    version '1.0-SNAPSHOT'


    ext.scalaBaseVersion = '2.11'
    ext.scalaVersion = "${scalaBaseVersion}.7"
    ext.slf4jVersion = '1.7.12'
    ext.logbackVersion = '1.1.3'
    ext.akkaVersion = '2.4.0-RC2'
    ext.scoverageVersion = '1.1.0'
    ext.springVersion = '4.2.1.RELEASE'
    ext.reactiveMongoVersion = '0.11.7'
    ext.awsSDKVersion = '1.10.18'
    ext.log4jVersion = '2.3'
    ext.jacksonVersion = '2.6.2'
    ext.json4sVersion = '3.3.0.RC6'

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'scoverage'

    compileJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
            "-Xlint:unchecked", "-Xlint:-options", "-Werror"
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
            "-Xlint:-unchecked", "-Xlint:-options"]

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.compilerArgs += "-parameters"
    }

    compileScala {
        scalaCompileOptions.useCompileDaemon = true
        scalaCompileOptions.additionalParameters = [
                "-deprecation",
                "-explaintypes",
                "-feature",
                "-language:postfixOps"
        ]

    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }


    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))
        systemProperty("aws.profile", "krakenmush-test")
        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])
    }

    repositories {
        mavenLocal()
        jcenter()
        maven {
            name = "typesafe-maven-release"
            url = "https://repo.typesafe.com/typesafe/maven-releases"
        }
        mavenCentral()
        maven {
            name = "sonatype-oss-releases"
            url = "http://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
            name = "sonatype-oss-snapshots"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "anormcyper"
            url = "http://repo.anormcypher.org"
        }
        maven { url "http://dl.bintray.com/dwhjames/maven" }
    }

    sourceSets.all { ext.purpose = null }

    sourceSets {
        main {
            purpose = "production"
        }
        test {
            purpose = "test"
        }
    }

    //noinspection GroovyAssignabilityCheck
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'commons-logging') {
                details.useTarget "org.apache.logging.log4j:log4j-jcl:${log4jVersion}"
            }
            if (details.requested.name == 'log4j') {
                details.useTarget "org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}"
            }

        }
    }

    dependencies {
        compile "org.scala-lang:scala-library:${scalaVersion}"
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"
        compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
        compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
        compile "org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}"
        compile "org.apache.logging.log4j:log4j-jcl:${log4jVersion}"
        compile "org.apache.logging.log4j:log4j-jul:${log4jVersion}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
        compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
        compile "com.typesafe.scala-logging:scala-logging_${scalaBaseVersion}:3.1.0"
        compile "com.typesafe:config:1.3.0"
        compile "io.atlassian:kadai-config_${scalaBaseVersion}:4.0.1"
        compile 'com.google.inject:guice:4.0'
        compile "net.codingwell:scala-guice_${scalaBaseVersion}:4.0.0"
        compile "org.scalaz:scalaz-core_${scalaBaseVersion}:7.1.3"
        compile 'com.google.code.findbugs:annotations:3.0.0'
        compile "codes.reactive:scala-time_${scalaBaseVersion}:0.3.0-SNAPSHOT"
        compile "org.json4s:json4s-native_${scalaBaseVersion}:${json4sVersion}"
        compile "org.json4s:json4s-jackson_${scalaBaseVersion}:${json4sVersion}"
        compile "org.feijoas:mango_${scalaBaseVersion}:0.12"
        compile "org.neo4j:neo4j-ogm:1.1.3-SNAPSHOT"
        compile "io.github.nremond:pbkdf2-scala_${scalaBaseVersion}:0.5"
        compile "org.mindrot:jbcrypt:0.3m"

        compile "com.amazonaws:aws-java-sdk-iam:${awsSDKVersion}"
        compile "com.amazonaws:aws-java-sdk-s3:${awsSDKVersion}"
        compile "com.amazonaws:aws-java-sdk-sqs:${awsSDKVersion}"
        compile "com.amazonaws:aws-java-sdk-sns:${awsSDKVersion}"
        compile "com.amazonaws:aws-java-sdk-ses:${awsSDKVersion}"
        compile "com.amazonaws:aws-java-sdk-elasticache:${awsSDKVersion}"

        testCompile "junit:junit:4.11"
        testCompile "org.scalatest:scalatest_${scalaBaseVersion}:2.2.5"
        testCompile "org.mockito:mockito-all:1.9.5"
        scoverage "org.scoverage:scalac-scoverage-plugin_${scalaBaseVersion}:${scoverageVersion}",
                "org.scoverage:scalac-scoverage-runtime_${scalaBaseVersion}:${scoverageVersion}"
    }
}

configure(rootProject) {

    apply plugin: 'idea'

    dependencies {
        compile "com.typesafe.akka:akka-actor_${scalaBaseVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-remote_${scalaBaseVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster_${scalaBaseVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster-metrics_${scalaBaseVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster-tools_${scalaBaseVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-slf4j_${scalaBaseVersion}:${akkaVersion}"
        compile 'io.kamon:sigar-loader:1.6.6-rev002'
        testCompile "com.typesafe.akka:akka-testkit_${scalaBaseVersion}:${akkaVersion}"

    }
}




